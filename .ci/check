#!/usr/bin/env bash

set -e

# For the check step concourse will set the following environment variables:
# SOURCE_PATH - path to component repository root directory.

if [[ -z "${SOURCE_PATH}" ]]; then
  export SOURCE_PATH="$(readlink -f "$(dirname ${0})/..")"
else
  export SOURCE_PATH="$(readlink -f ${SOURCE_PATH})"
fi

cd "${SOURCE_PATH}"

# Build Golint.
go install -mod=vendor ./vendor/golang.org/x/lint/golint

###############################################################################

PACKAGES="$(go list -mod=vendor -e ./...)"
PACKAGES_DIRS="$(go list -mod=vendor -e -f '{{.Dir}}' ./...)"

# Execute static code checks.
echo "Running go vet..."
go vet -mod=vendor ${PACKAGES}

# go fmt ignores -mod=vendor and performs module lookup (https://github.com/golang/go/issues/27841).
# Also go fmt is just alias for gofmt -l -w and does not support flags that gofmt does.
# That is why gofmt is used.

# Execute automatic code formatting directive.
echo "Running gofmt..."
gofmt -s -l -w ${PACKAGES_DIRS}

# Execute lint checks.
echo "Running golint..."
for dir in ${PACKAGES_DIRS}; do
  golint -set_exit_status $dir
done

# Install golangci-lint
if ! which golangci-lint 1>/dev/null; then
  curl -sfL "https://install.goreleaser.com/github.com/golangci/golangci-lint.sh" | sh -s -- -b $(go env GOPATH)/bin v1.18.0
fi

echo "Running golangci-lint..."
golangci-lint run ./...
