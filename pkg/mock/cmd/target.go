// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardenctl/cmd (interfaces: TargetInterface)

// Package cmd is a generated GoMock package.
package cmd

import (
	cmd "github.com/gardener/gardenctl/cmd"
	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
	reflect "reflect"
)

// MockTargetInterface is a mock of TargetInterface interface
type MockTargetInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTargetInterfaceMockRecorder
}

// MockTargetInterfaceMockRecorder is the mock recorder for MockTargetInterface
type MockTargetInterfaceMockRecorder struct {
	mock *MockTargetInterface
}

// NewMockTargetInterface creates a new mock instance
func NewMockTargetInterface(ctrl *gomock.Controller) *MockTargetInterface {
	mock := &MockTargetInterface{ctrl: ctrl}
	mock.recorder = &MockTargetInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTargetInterface) EXPECT() *MockTargetInterfaceMockRecorder {
	return m.recorder
}

// K8SClient mocks base method
func (m *MockTargetInterface) K8SClient() (kubernetes.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "K8SClient")
	ret0, _ := ret[0].(kubernetes.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// K8SClient indicates an expected call of K8SClient
func (mr *MockTargetInterfaceMockRecorder) K8SClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "K8SClient", reflect.TypeOf((*MockTargetInterface)(nil).K8SClient))
}

// K8SClientToKind mocks base method
func (m *MockTargetInterface) K8SClientToKind(arg0 cmd.TargetKind) (kubernetes.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "K8SClientToKind", arg0)
	ret0, _ := ret[0].(kubernetes.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// K8SClientToKind indicates an expected call of K8SClientToKind
func (mr *MockTargetInterfaceMockRecorder) K8SClientToKind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "K8SClientToKind", reflect.TypeOf((*MockTargetInterface)(nil).K8SClientToKind), arg0)
}

// Kind mocks base method
func (m *MockTargetInterface) Kind() (cmd.TargetKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(cmd.TargetKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Kind indicates an expected call of Kind
func (mr *MockTargetInterfaceMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockTargetInterface)(nil).Kind))
}

// SetStack mocks base method
func (m *MockTargetInterface) SetStack(arg0 []cmd.TargetMeta) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStack", arg0)
}

// SetStack indicates an expected call of SetStack
func (mr *MockTargetInterfaceMockRecorder) SetStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStack", reflect.TypeOf((*MockTargetInterface)(nil).SetStack), arg0)
}

// Stack mocks base method
func (m *MockTargetInterface) Stack() []cmd.TargetMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stack")
	ret0, _ := ret[0].([]cmd.TargetMeta)
	return ret0
}

// Stack indicates an expected call of Stack
func (mr *MockTargetInterfaceMockRecorder) Stack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stack", reflect.TypeOf((*MockTargetInterface)(nil).Stack))
}
