// This file was automatically generated by informer-gen

package internalversion

import (
	time "time"

	garden "github.com/gardener/gardener/pkg/apis/garden"
	clientset_internalversion "github.com/gardener/gardener/pkg/client/garden/clientset/internalversion"
	internalinterfaces "github.com/gardener/gardener/pkg/client/garden/informers/internalversion/internalinterfaces"
	internalversion "github.com/gardener/gardener/pkg/client/garden/listers/garden/internalversion"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// SeedInformer provides access to a shared informer and lister for
// Seeds.
type SeedInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() internalversion.SeedLister
}

type seedInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewSeedInformer constructs a new informer for Seed type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSeedInformer(client clientset_internalversion.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredSeedInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSeedInformer constructs a new informer for Seed type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSeedInformer(client clientset_internalversion.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.Garden().Seeds().List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.Garden().Seeds().Watch(options)
			},
		},
		&garden.Seed{},
		resyncPeriod,
		indexers,
	)
}

func (f *seedInformer) defaultInformer(client clientset_internalversion.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredSeedInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *seedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&garden.Seed{}, f.defaultInformer)
}

func (f *seedInformer) Lister() internalversion.SeedLister {
	return internalversion.NewSeedLister(f.Informer().GetIndexer())
}
