// Code generated by informer-gen. DO NOT EDIT.

package internalversion

import (
	time "time"

	garden "github.com/gardener/gardener/pkg/apis/garden"
	clientsetinternalversion "github.com/gardener/gardener/pkg/client/garden/clientset/internalversion"
	internalinterfaces "github.com/gardener/gardener/pkg/client/garden/informers/internalversion/internalinterfaces"
	internalversion "github.com/gardener/gardener/pkg/client/garden/listers/garden/internalversion"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ShootInformer provides access to a shared informer and lister for
// Shoots.
type ShootInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() internalversion.ShootLister
}

type shootInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewShootInformer constructs a new informer for Shoot type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewShootInformer(client clientsetinternalversion.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredShootInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredShootInformer constructs a new informer for Shoot type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredShootInformer(client clientsetinternalversion.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.Garden().Shoots(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.Garden().Shoots(namespace).Watch(options)
			},
		},
		&garden.Shoot{},
		resyncPeriod,
		indexers,
	)
}

func (f *shootInformer) defaultInformer(client clientsetinternalversion.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredShootInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *shootInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&garden.Shoot{}, f.defaultInformer)
}

func (f *shootInformer) Lister() internalversion.ShootLister {
	return internalversion.NewShootLister(f.Informer().GetIndexer())
}
