// Code generated by client-gen. DO NOT EDIT.

package internalversion

import (
	"time"

	core "github.com/gardener/gardener/pkg/apis/core"
	scheme "github.com/gardener/gardener/pkg/client/core/clientset/internalversion/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ControllerRegistrationsGetter has a method to return a ControllerRegistrationInterface.
// A group's client should implement this interface.
type ControllerRegistrationsGetter interface {
	ControllerRegistrations() ControllerRegistrationInterface
}

// ControllerRegistrationInterface has methods to work with ControllerRegistration resources.
type ControllerRegistrationInterface interface {
	Create(*core.ControllerRegistration) (*core.ControllerRegistration, error)
	Update(*core.ControllerRegistration) (*core.ControllerRegistration, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*core.ControllerRegistration, error)
	List(opts v1.ListOptions) (*core.ControllerRegistrationList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *core.ControllerRegistration, err error)
	ControllerRegistrationExpansion
}

// controllerRegistrations implements ControllerRegistrationInterface
type controllerRegistrations struct {
	client rest.Interface
}

// newControllerRegistrations returns a ControllerRegistrations
func newControllerRegistrations(c *CoreClient) *controllerRegistrations {
	return &controllerRegistrations{
		client: c.RESTClient(),
	}
}

// Get takes name of the controllerRegistration, and returns the corresponding controllerRegistration object, and an error if there is any.
func (c *controllerRegistrations) Get(name string, options v1.GetOptions) (result *core.ControllerRegistration, err error) {
	result = &core.ControllerRegistration{}
	err = c.client.Get().
		Resource("controllerregistrations").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ControllerRegistrations that match those selectors.
func (c *controllerRegistrations) List(opts v1.ListOptions) (result *core.ControllerRegistrationList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &core.ControllerRegistrationList{}
	err = c.client.Get().
		Resource("controllerregistrations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested controllerRegistrations.
func (c *controllerRegistrations) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("controllerregistrations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a controllerRegistration and creates it.  Returns the server's representation of the controllerRegistration, and an error, if there is any.
func (c *controllerRegistrations) Create(controllerRegistration *core.ControllerRegistration) (result *core.ControllerRegistration, err error) {
	result = &core.ControllerRegistration{}
	err = c.client.Post().
		Resource("controllerregistrations").
		Body(controllerRegistration).
		Do().
		Into(result)
	return
}

// Update takes the representation of a controllerRegistration and updates it. Returns the server's representation of the controllerRegistration, and an error, if there is any.
func (c *controllerRegistrations) Update(controllerRegistration *core.ControllerRegistration) (result *core.ControllerRegistration, err error) {
	result = &core.ControllerRegistration{}
	err = c.client.Put().
		Resource("controllerregistrations").
		Name(controllerRegistration.Name).
		Body(controllerRegistration).
		Do().
		Into(result)
	return
}

// Delete takes name of the controllerRegistration and deletes it. Returns an error if one occurs.
func (c *controllerRegistrations) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("controllerregistrations").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *controllerRegistrations) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("controllerregistrations").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched controllerRegistration.
func (c *controllerRegistrations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *core.ControllerRegistration, err error) {
	result = &core.ControllerRegistration{}
	err = c.client.Patch(pt).
		Resource("controllerregistrations").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
