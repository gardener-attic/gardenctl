#!/bin/bash -eu

# rendition parameters, see http://conemu.github.io/en/AnsiEscapeCodes.html
export SGR_RESET="\033[0m"
export SGR_BOLD="\033[1m"
export SGR_BOLD_UNSET="\033[22m"
export SGR_DIM="\033[2m"
export SGR_DIM_UNSET="\033[22m"
export SGR_ITALIC="\033[3m"
export SGR_ITALIC_UNSET="\033[23m"
export SGR_UNDERLINE="\033[4m"
export SGR_UNDERLINE_UNSET="\033[24m"
export SGR_INVERSE="\033[7m"
export SGR_INVERSE_UNSET="\033[27m"

# ansi colors, see https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
# pick of solarized color theme working fine with light and dark background, see http://ethanschoonover.com/solarized
# only available when tput is available, otherwise fall-back to 16 colors (ansi escape codes)
if tput setaf 1 &> /dev/null; then
  export COLOR_LIGHT_GRAY=$(tput setaf 244) # called base0 in solarized color theme (default color for dark theme)
  export COLOR_DARK_GRAY=$(tput setaf 241)  # called base00 in solarized color theme (default color for light theme)
  export COLOR_YELLOW=$(tput setaf 136);
  export COLOR_ORANGE=$(tput setaf 166);
  export COLOR_RED=$(tput setaf 160);
  export COLOR_MAGENTA=$(tput setaf 125);
  export COLOR_VIOLET=$(tput setaf 61);
  export COLOR_BLUE=$(tput setaf 33);
  export COLOR_CYAN=$(tput setaf 37);
  export COLOR_GREEN=$(tput setaf 64);
else
  export COLOR_LIGHT_GRAY="\033[37m"
  export COLOR_DARK_GRAY="\033[90m"
  export COLOR_YELLOW="\033[33m"
  export COLOR_ORANGE="\033[91m"
  export COLOR_RED="\033[31m"
  export COLOR_MAGENTA="\033[35m"
  export COLOR_VIOLET="\033[94m"
  export COLOR_BLUE="\033[34m"
  export COLOR_CYAN="\033[36m"
  export COLOR_GREEN="\033[32m"
fi;

# color given text in given rendition/color
function color() {
  local rendition=""
  local color="$1"
  [[ $color == bold_* ]]      && rendition=$SGR_BOLD      && color=${color#*_}
  [[ $color == dim_* ]]       && rendition=$SGR_DIM       && color=${color#*_}
  [[ $color == italic_* ]]    && rendition=$SGR_ITALIC    && color=${color#*_}
  [[ $color == underline_* ]] && rendition=$SGR_UNDERLINE && color=${color#*_}
  [[ $color == inverse_* ]]   && rendition=$SGR_INVERSE   && color=${color#*_}
  case "$color" in
    "light_gray") color=$COLOR_LIGHT_GRAY;;
    "dark_gray")  color=$COLOR_DARK_GRAY;;
    "yellow")     color=$COLOR_YELLOW;;
    "orange")     color=$COLOR_ORANGE;;
    "red")        color=$COLOR_RED;;
    "magenta")    color=$COLOR_MAGENTA;;
    "violet")     color=$COLOR_VIOLET;;
    "blue")       color=$COLOR_BLUE;;
    "cyan")       color=$COLOR_CYAN;;
    "green")      color=$COLOR_GREEN;;
  esac
  echo -e "${rendition}${color}${@:2}${SGR_RESET}"
}

# color given notifications
function debug() {
  echo -e "$(color light_gray "$@")"
}

function info() {
  echo -e "$(color cyan "$@")"
}

function ok() {
  echo -e "$(color green "$@")"
}

function warning() {
  echo -e "$(color orange "$@")"
}

function error() {
  echo -e "$(color red "$@")"
}

function fatal() {
  echo -e "$(color inverse_red "$@")"
}

# show warning message and abort execution
function abort() {
  warning "$@"
  exit 100 # suggested exit code (to be used by trap handler to detect abortion if implemented)
}

# show error message and fail execution
function fail() {
  error "$@"
  exit 1 # default exit code
}

# alignment echo functions
function left() {
  local width="${1}"
  local text="${@:2}"
  printf "%-${width}s" "${text}"
}

function right() {
  local width="${1}"
  local text="${@:2}"
  printf "%+${width}s" "${text}"
}

function center() {
  local width="${1}"
  local text="${@:2}"
  local text_wo_escape_chars="$(echo ${text} | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g")"
  local pre_padding=$(((${width}-${#text_wo_escape_chars})/2))
  local post_padding=$((${width}-${#text_wo_escape_chars}-${pre_padding}))
  printf "%*.*s%s%*.*s" ${pre_padding} ${pre_padding} " " "${text}" ${post_padding} ${post_padding} " "
}

# line
line() {
  local width="${1}"
  local char="${2:- }"
  printf "%${width}s" | sed -r "s/ /$char/g"
}

# ruler
function hr() {
  local width="${1:-80}"
  local char="${2:--}"
  debug "\n$(line "$width" "$char")\n"
}