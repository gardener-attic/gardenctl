#!/usr/bin/env bash

set -e

# For the check step concourse will set the following environment variables:
# SOURCE_PATH - path to component repository root directory.

if [[ -z "${SOURCE_PATH}" ]]; then
  export SOURCE_PATH="$(readlink -f "$(dirname ${0})/..")"
else
  export SOURCE_PATH="$(readlink -f ${SOURCE_PATH})"
fi

# The `go <cmd>` commands requires to see the target repository to be part of a
# Go workspace. Thus, if we are not yet in a Go workspace, let's create one
# temporarily by using symbolic links.
if [[ "${SOURCE_PATH}" != *"src/github.com/gardener/gardener" ]]; then
  SOURCE_SYMLINK_PATH="${SOURCE_PATH}/tmp/src/github.com/gardener/gardener"
  if [[ -d "${SOURCE_PATH}/tmp" ]]; then
    rm -rf "${SOURCE_PATH}/tmp"
  fi
  mkdir -p "${SOURCE_PATH}/tmp/src/github.com/gardener"
  ln -s "${SOURCE_PATH}" "${SOURCE_SYMLINK_PATH}"
  cd "${SOURCE_SYMLINK_PATH}"

  export GOPATH="${SOURCE_PATH}/tmp"
  export GOBIN="${SOURCE_PATH}/tmp/bin"
  export PATH="${GOBIN}:${PATH}"
fi

# Install Golint.
if ! which golint 1>/dev/null; then
  echo -n "Installing golint... "
  go get -u golang.org/x/lint/golint
  echo "done."
fi

# Install Helm (see https://docs.helm.sh/using_helm/#from-script).
if ! which helm 1>/dev/null; then
  echo -n "Installing helm... "
  install_helm_path="./get_helm.sh"
  curl https://raw.githubusercontent.com/helm/helm/v2.9.1/scripts/get > "${install_helm_path}"
  chmod 700 "${install_helm_path}"
  bash "${install_helm_path}"
  rm ./"${install_helm_path}"
  echo "done."
fi

###############################################################################

PACKAGES="$(go list -e ./... | grep -vE '/tmp/|/vendor/|/pkg/apis|/pkg/client/garden|/pkg/client/machine|/pkg/openapi|/pkg/localprovider')"
LINT_FOLDERS="$(echo ${PACKAGES} | sed "s|github.com/gardener/gardener|.|g")"

# Execute static code checks.
go vet ${PACKAGES}

# Execute automatic code formatting directive.
go fmt ${PACKAGES}

# Execute lint checks.
for package in ${LINT_FOLDERS}; do
  golint -set_exit_status $(find $package -maxdepth 1 -name "*.go" | grep -vE 'zz_generated|_test.go')
done

# Check for chart symlink errors
BROKEN_SYMLINKS=$(find -L ${SOURCE_PATH}/charts -type l)
if [[ -n ${BROKEN_SYMLINKS} ]]; then
  echo "Found broken symlinks:"
  echo ${BROKEN_SYMLINKS}
  exit 1
fi

# Render chart dirs
ALL_CHART_DIRS=$(find ${SOURCE_PATH}/charts -type f -name "Chart.yaml" -exec dirname {} \; | sort -r)
for dir in ${ALL_CHART_DIRS}
do
  helm template ${dir} 1> /dev/null
done
