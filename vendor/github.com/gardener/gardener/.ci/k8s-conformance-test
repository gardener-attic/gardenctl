#!/bin/bash

# Copyright (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Performs the CNCF conformance tests according to 
# https://github.com/cncf/k8s-conformance 
#
# Prerequisites:
# - Components:
#   bash, kubectl, jq, python (mako)
#
# - Parameters:
#   - GARDEN_KUBECONFIG
#     path to kubeconfig of garden cluster
#   - SHOOT_NAME
#     name of shoot
#   - GARDEN_NAMESPACE
#     target namespace, e.g. garden-conf
#   - CLOUD_PROVIDER
#     cloud provider (az, os, gcp, aws)
#   - SHOOT_SPEC_PATH
#     detailed specification of shoot resource manifest
#
# -----------------------------------------------------------------------------

readonly TRUE=0
readonly FALSE=1

# Max. time to wait for creation/deletion of shoot
MAX_RETRY_TIME=$((60 * 60)) # 60min 
MAX_TEST_TIME=$((60 * 60)) # 60min 

# Read environment variables
GARDENER_PATH=$(readlink -f "${GARDENER_PATH}")

# Sript parameter
VALID_CLOUD_PROVIDERS="aws gcp os az"

# -----------------------------------------------------------------------------
function help() {
cat << EOF
Usage: 
k8s-conformance-test <garden-kubeconfig> <shoot-name> <garden-namespace> <cloud-provider> <shoot-spec-path>

Parameters:
  <garden-kubeconfig>: string, path to kubeconfig of Garden cluster
  <shoot-name>: string, e.g. conf-aws-12345
  <garden-namespace>: string, e.g. garden-mytest. Naming convention: garden-<project>
  <cloud-provider>: string, one of (${VALID_CLOUD_PROVIDERS})
  <shoot-spec>: string, path to yaml file containing detailed specification for shoot resource manifest

Description: Runs kubernetes conformance tests

Example:
  k8s-conformance-test ./foo/kubeconfig conf-aws-12345 garden-mytest aws ./shoot-spec.yaml
EOF
}

# -----------------------------------------------------------------------------
function trap_handler() {
   kubectl_res=$(kubectl --kubeconfig="$GARDEN_KUBECONFIG" get shoots -n "$GARDEN_NAMESPACE" -o json)
   if [ $? -eq 0 ] ; then
     if [[ $(echo "$kubectl_res" | jq -r " [ .items[].metadata.name ] | [ if (.[] == \"$SHOOT_NAME\") then true else false end ] | any") = "true" ]] ; then
       # Shoot exists
       delete_shoot
     fi
    else
     echo "ERROR: kubectl failed in trap_handler. Call delete_shoot anyway in case of a temporary issue."
     delete_shoot
   fi  
}

# -----------------------------------------------------------------------------
function create_shoot() {
  # Creates a shoot using shoot templates in gardener/hack/templates.
  #
  # Used global variables:
  #   TRUE/FALSE
  #   SHOOT_NAME
  #   GARDEN_NAMESPACE
  #   CLOUD_PROVIDER
  #   GARDENER_PATH
  #   SHOOT_SPEC_PATH
  #   GARDEN_KUBECONFIG
  #   MAX_RETRY_TIME

  success="$FALSE"

  echo "INFO: Create shoot ${SHOOT_NAME} in ${GARDEN_NAMESPACE} for cloud provider ${CLOUD_PROVIDER}" 

  # Create target K8s Shoot cluster
mako-render $GARDENER_PATH/hack/templates/resources/shoot.yaml.tpl --var cloud=$CLOUD_PROVIDER --var values=<(cat <<EOF
metadata:
  name: "${SHOOT_NAME}"
  namespace: "${GARDEN_NAMESPACE}"
$(cat "$SHOOT_SPEC_PATH")
EOF
) | kubectl apply --kubeconfig="${GARDEN_KUBECONFIG}" -f - > /dev/null

  if [ ! $? -eq 0 ]; then
    echo "ERROR: shoot creation failed (mako-render and/or kubectl)"
    return "$success"
  fi

  echo  "INFO: Wait until the shoot becomes available ... or MAX_RETRY_TIME=${MAX_RETRY_TIME}s exceeded"
  retry_stop=$(($(date +%s) + $MAX_RETRY_TIME))
  wait_time=0
  while [[ $(date +%s) -lt $retry_stop ]]; do
    sleep 15
    # Check status.lastOperation.status
    kubectl_res=$(kubectl --kubeconfig="$GARDEN_KUBECONFIG" get shoots "$SHOOT_NAME" -o json -n "$GARDEN_NAMESPACE")
    if [ $? -eq 0 ] ; then
    
      if [ $(echo "$kubectl_res" | jq -r ".status.lastOperation.state") = "Succeeded" ]; then
      
        # Check status.conditions
        #  The conditions tag is only set after an operation ... 
        jq_script="
          if( .status.conditions | length > 0 ) 
          then 
            [.status.conditions[].status | ascii_downcase] 
          else empty end | 
          [ 
            if( .[] == \"true\" ) 
              then 
                true 
              else 
                false 
              end 
          ] | 
          all"

        kubectl_res=$(kubectl --kubeconfig="$GARDEN_KUBECONFIG" get shoots "$SHOOT_NAME" -o json -n "$GARDEN_NAMESPACE")
        if [ $? -eq 0 ] ; then
          if [[ $(echo "$kubectl_res" | jq -r "$jq_script") = "true" ]] ; then
            success="$TRUE"
            # Write SHOOT_KUBECONFIG
            kubectl --kubeconfig="$GARDEN_KUBECONFIG" get secrets "$SHOOT_NAME".kubeconfig --namespace "$GARDEN_NAMESPACE" -o jsonpath={.data.kubeconfig} | base64 --decode > "$SHOOT_KUBECONFIG"
            break;
          fi
        else
          echo "ERROR: kubectl call failed. Try again after 15s"
        fi
      fi
    else
      echo "ERROR: kubectl call failed. Try again after 15s"
    fi

    wait_time=$(($wait_time + 15))
    echo "INFO: Shoot is not available yet. Waiting 15s more ... Current processing time: ${wait_time}s"
  done

  return "$success"
}

# -----------------------------------------------------------------------------
function delete_shoot() {
  # Deletes a shoot by using the script gardener/hack/delete-shoot
  #
  # Used global variables:
  #   TRUE/FALSE
  #   SHOOT_NAME
  #   GARDEN_NAMESPACE
  #   GARDENER_PATH
  #   GARDEN_KUBECONFIG
  #   MAX_RETRY_TIME

  echo "Delete shoot " "$SHOOT_NAME" " in " "$GARDEN_NAMESPACE" 

  KUBECONFIG="$GARDEN_KUBECONFIG" "$GARDENER_PATH"/hack/delete-shoot "$SHOOT_NAME" "$GARDEN_NAMESPACE"

  echo  "INFO: Wait until the shoot is deleted... or MAX_RETRY_TIME="$MAX_RETRY_TIME "s exceeded"
  retry_stop=$(($(date +%s) + $MAX_RETRY_TIME))
  success="$FALSE"
  wait_time=0
  while [[ $(date +%s) -lt $retry_stop ]]; do
    sleep 15
    kubectl_res=$(kubectl --kubeconfig="$GARDEN_KUBECONFIG" get shoots -n "$GARDEN_NAMESPACE" -o json)
    if [ $? -eq 0 ] ; then
      if [[ $(echo "$kubectl_res" | jq -r " [ .items[].metadata.name ] | [ if (.[] == \"$SHOOT_NAME\") then true else false end ] | any") = "false" ]] ; then
        success="$TRUE"
        break
      fi
    else
      echo "ERROR: kubectl failed in delete shoot. Try again in 15s"
    fi

    wait_time=$(($wait_time + 15))   
    echo -e "INFO: Shoot is still in process of deletion. Waiting 15s more ... Current processing time: ${wait_time}s"
  done

  if [ "$success" -eq "$FALSE" ]; then
    echo "ERROR: Shoot could not be deleted within $MAX_RETRY_TIME seconds!"
  else
    echo "Shoot ${SHOOT_NAME} in ${GARDEN_NAMESPACE} successfully deleted." 
  fi
  
  return "$success"
}

# -----------------------------------------------------------------------------
function run_conformance_tests() {
  # Runs the conformance tests
  #
  # Used global variables:
  #   TRUE/FALSE
  #   GARDEN_KUBECONFIG
  #   MAX_RETRY_TIME

  # Create shoot
  if ! create_shoot ; then
    echo "ERROR: Shoot could not be created."
    exit 1
  fi

  # Deploy and run conformance test
  echo "INFO: Deploy the conformance test case"
  curl -sL https://raw.githubusercontent.com/cncf/k8s-conformance/master/sonobuoy-conformance.yaml | kubectl --kubeconfig="$SHOOT_KUBECONFIG" apply -f - > /dev/null

  echo  "INFO: Wait until the pod sonobuoy/sonobuoy becomes available ... or MAX_RETRY_TIME="$MAX_RETRY_TIME "s exceeded"
  retry_stop=$(($(date +%s) + $MAX_RETRY_TIME))
  success="$FALSE"

  while [[ $(date +%s) -lt $retry_stop ]]; do
    sleep 5
    kubectl_res=$(kubectl --kubeconfig="$SHOOT_KUBECONFIG" get pod sonobuoy -n sonobuoy -o json)
    if [ $? -eq 0 ] ; then
      if [ $(echo "$kubectl_res" | jq -r '.status.phase') = "Running" ]; then
        success="$TRUE"
        break;
      fi
      echo "INFO: Pod sonobuoy/sonobuoy is not yet available/ready. Waiting..."
    else
      echo "ERROR: kubectl failed in run_conformance_test. Try again in 5s"
    fi
  done

  if [ "$success" -eq "$FALSE" ]; then
    echo "ERROR: Pod sonobuoy/sonobuoy could not be started within $max_retry_time seconds!"
    delete_shoot 
    exit 1
  fi

  echo "INFO: Monitor test: check every 15s the last log line if the test still runs"

  retry_stop=$(($(date +%s) + $MAX_TEST_TIME))
  success="$FALSE"
  while [[ $(date +%s) -lt $retry_stop ]]; do
    sleep 15
    kubectl_res=$(kubectl --kubeconfig="$SHOOT_KUBECONFIG" logs sonobuoy -n sonobuoy)
    if [ $? -eq 0 ] ; then
      last_line=$(echo "$kubectl_res" | tail -1)

      if [[ $last_line = *"no-exit was specified, sonobuoy is now blocking"* ]]; then
        success="$TRUE"
        break;
      fi
    else
      echo "ERROR: kubectl failed in run_conformance_test. Tray again in 15s"
    fi
  done

  if [ "$success" -eq "$FALSE" ]; then
    echo "ERROR: Conformance tests didn't finish in  ${MAX_TEST_TIME} seconds!"
    delete_shoot
    exit 1
  fi

  # Copy the test result to local drive
  RESULT_FILENAME=$(kubectl --kubeconfig="$SHOOT_KUBECONFIG" exec sonobuoy -n sonobuoy ls /tmp/sonobuoy)

  if [[ "$RESULT_FILENAME" = *"tar.gz"* ]]; then
    kubectl --kubeconfig="$SHOOT_KUBECONFIG" cp sonobuoy/sonobuoy:/tmp/sonobuoy/"$RESULT_FILENAME" "$RESULT_DIR" 2> /dev/null
  else
    echo "ERROR: Conformance test failed: no expected *.tar.gz archive in /tmp/sonobuoy generated" >&2
    delete_shoot
    exit 1
  fi

  # Examine e2e.log  
  pushd "$RESULT_DIR"
  tar -xf "$RESULT_FILENAME" plugins/e2e/results/e2e.log 
  mv plugins/e2e/results/e2e.log .

  # Check the log if in the last 5 lines the word SUCCESS appears
  success="$FALSE"
  if [[ $(tail -5 e2e.log) = *"SUCCESS"* ]] ; then
    success="$TRUE"
  else
    # Print the summary section of e2e.log to stdout
    sed -n '/^Summarizing/,$p' e2e.log
  fi
  popd

  # Delete shoot
  delete_shoot

  return "$success"
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------

# Register trap handler
trap trap_handler HUP INT QUIT PIPE TERM

# Don't exit script in case of errors
set +e

# Check arguments
# - exactly one argument which has to be one of aws, os, az, gcp
if [ "$#" -ne 5 ] ; then
  echo "ERROR: wrong number of arguments"
  help
  exit 1
fi

# Assign arguments to global variables
GARDEN_KUBECONFIG="$1"
SHOOT_NAME="$2"
GARDEN_NAMESPACE="$3"
CLOUD_PROVIDER="$4"
SHOOT_SPEC_PATH="$5"

RESULT_DIR="$(dirname $0)"
SHOOT_KUBECONFIG="${RESULT_DIR}/${CLOUD_PROVIDER}_kubeconfig.yaml"

# Echo conformance test result
if run_conformance_tests ; then
  echo "INFO: Conformance test SUCCESSFULLY finished"
  exit 0
else
  echo "INFO: Conformance test FAILED"
  exit 1
fi

