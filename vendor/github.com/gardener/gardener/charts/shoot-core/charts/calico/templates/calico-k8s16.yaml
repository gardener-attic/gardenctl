{{- if semverCompare "< 1.7" .Capabilities.KubeVersion.GitVersion -}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: {{ include "daemonsetversion" . }}
kind: DaemonSet
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
    k8s-app: calico-node
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      k8s-app: calico-node
  template:
    metadata:
      labels:
        k8s-app: calico-node
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        checksum/configmap-calico: {{ include (print $.Template.BasePath "/calico-config.yaml") . | sha256sum }}
    spec:
      hostNetwork: true
      serviceAccountName: calico-node
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      containers:
      - name: calico-node
        image: {{ index .Values.images "calico-node" }}
        env:
        - name: DATASTORE_TYPE
          value: "kubernetes"
        # Cluster type to identify the deployment type
        - name: CLUSTER_TYPE
          value: "k8s"
        - name: CALICO_DISABLE_FILE_LOGGING
          value: "true"
        - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
          value: "ACCEPT"
        - name: FELIX_IPV6SUPPORT
          value: "false"
        - name: FELIX_IPINIPMTU
          value: "1440"
        - name: FELIX_LOGSEVERITYSCREEN
          value: "WARNING"
        - name: FELIX_LOGSEVERITYSYS
          value: "NONE"
        - name: FELIX_HEALTHENABLED
          value: "true"
        # Disable usage reporting
        - name: FELIX_USAGEREPORTINGENABLED
          value: "false"
        - name: WAIT_FOR_DATASTORE
          value: "true"
        - name: CALICO_IPV4POOL_CIDR
          value: "{{.Values.global.podNetwork}}"
        - name: CALICO_IPV4POOL_IPIP
          value: "always"
        {{- if ne .Values.cloudProvider "azure"}}
        - name: FELIX_IPINIPENABLED
          value: "true"
        {{- else }}
        - name: FELIX_IPINIPENABLED
          value: "false"
        - name: CALICO_NETWORKING_BACKEND
          value: "none"
        {{- end }}
        - name: CALICO_STARTUP_LOGLEVEL
          value: "ERROR"
        - name: NODENAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: IP
          value: ""
        securityContext:
          privileged: true
        resources:
          requests:
            cpu: 250m
        livenessProbe:
          httpGet:
            path: /liveness
            port: 9099
          periodSeconds: 10
          initialDelaySeconds: 10
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /readiness
            port: 9099
          periodSeconds: 10
        volumeMounts:
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /var/run/calico
            name: var-run-calico
            readOnly: false
          # Temporary fix
          - mountPath: /etc/service/available/confd
            name: run-volume
      - name: install-cni
        image: {{ index .Values.images "calico-cni" }}
        command: ["/install-cni.sh"]
        env:
        # The CNI network config to install on each node.
        - name: CNI_NETWORK_CONFIG
          valueFrom:
            configMapKeyRef:
              name: calico-config
              key: cni_network_config
        # Set the hostname based on the k8s node name.
        - name: KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
      volumes:
      # Used by calico/node.
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: var-run-calico
        hostPath:
          path: /var/run/calico
      # Used to install CNI.
      - name: cni-bin-dir
        hostPath:
          path: /opt/cni/bin
      - name: cni-net-dir
        hostPath:
          path: /etc/cni/net.d
      # Temporary fix
      - name: run-volume
        configMap:
          name: calico-config
          # -rwxr-xr-x permissions
          defaultMode: 0761
          items:
          - key: run
            path: run
---
kind: ClusterRole
apiVersion: {{ include "rbacversion" . }}
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
rules:
  - apiGroups: [""]
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups: [""]
    resources:
      - pods/status
    verbs:
      - update
  - apiGroups: [""]
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups: [""]
    resources:
      - nodes
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups: ["extensions"]
    resources:
      - thirdpartyresources
    verbs:
      - create
      - get
      - list
      - watch
  - apiGroups: ["extensions"]
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["projectcalico.org"]
    resources:
      - globalbgppeers
    verbs:
      - get
      - list
  - apiGroups: ["projectcalico.org"]
    resources:
      - globalconfigs
      - globalbgpconfigs
    verbs:
      - create
      - get
      - list
      - update
      - watch
  - apiGroups: ["projectcalico.org"]
    resources:
      - ippools
    verbs:
      - create
      - get
      - list
      - update
      - watch
  - apiGroups: ["alpha.projectcalico.org"]
    resources:
      - systemnetworkpolicies
    verbs:
      - get
      - list
      - watch
---
apiVersion: {{ include "rbacversion" . }}
kind: ClusterRoleBinding
metadata:
  name: calico-node
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system
{{- end -}}
