---
apiVersion: {{include "deploymentversion" .}}
kind: Deployment
metadata:
  name: grafana
  namespace: {{.Release.Namespace}}
  labels:
    component: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      component: grafana
  template:
    metadata:
      annotations:
        checksum/configmap-dashboards: {{ include (print $.Template.BasePath "/grafana-dashboards-configmap.yaml") . | sha256sum }}
        checksum/secret-auth: {{ include (print $.Template.BasePath "/grafana-secret.yaml") . | sha256sum }}
      labels:
        component: grafana
    spec:
      # This feature requires 1.6 Kubernetes. Its needed otherwise Grafana won't fetch the needed metadata from Prometheus
      initContainers:
      - name: init-prometheus
        image: {{ index .Values.images "busybox" }}
        command: ['sh', '-c', 'until wget -T 5 -qO- http://prometheus-web:8080/status > /dev/null; do echo waiting for Prometheus; sleep 2; done;']
      containers:
      - name: grafana
        image: {{ index .Values.images "grafana" }}
        imagePullPolicy: IfNotPresent
        env:
        - name: GF_AUTH_BASIC_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: password
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/grafana-storage
        ports:
        - name: web
          containerPort: 3000
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
          limits:
            memory: 200Mi
            cpu: 200m
      - name: grafana-watcher
        image: {{ index .Values.images "grafana-watcher" }}
        imagePullPolicy: IfNotPresent
        args:
        - --watch-dir=/var/grafana-dashboards
        - --grafana-url=http://localhost:3000
        env:
        - name: GRAFANA_USER
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: user
        - name: GRAFANA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: password
        volumeMounts:
        - name: grafana-dashboards
          mountPath: /var/grafana-dashboards
        resources:
          requests:
            memory: 16Mi
            cpu: 50m
          limits:
            memory: 32Mi
            cpu: 100m
        volumeMounts:
        - name: grafana-dashboards
          mountPath: /var/grafana-dashboards
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
