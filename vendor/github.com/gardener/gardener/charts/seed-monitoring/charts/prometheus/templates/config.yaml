apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: {{.Release.Namespace}}
data:
  prometheus.yaml: |
    # All services in the {{.Release.Namespace}} and shoot's kube-system that are annotated with
    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need to set this to `https` & most likely set the `tls_config` of the scrape config.
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: If the metrics are exposed on a different port to the service then set this appropriately. Use this when multiple ports are avaible by the pod.
    # * `prometheus.io/name`: job name label to be applied to all metrics from that service.
    # exceptions are:
    # * kube-apiserver
    # * kubelet (both in seed and shoot)
    # * kube-state-metrics (both in seed and shoot)

    global:
      evaluation_interval: 30s
      scrape_interval: 30s
      external_labels:
        cluster: {{ .Release.Namespace }}
        seed_api: {{ .Values.seed.apiserver }}
        seed_region: {{ .Values.seed.region }}
        seed_profile: {{ .Values.seed.profile }}
    rule_files:
    - /etc/prometheus/rules/*.yml
    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names: [{{.Release.Namespace}}]
        scheme: http
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_label_component]
          action: keep
          regex: alertmanager
        - source_labels: [__meta_kubernetes_service_label_role]
          action: keep
          regex: monitoring
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: metrics
    scrape_configs:
    - job_name: 'kube-etcd3'
      scheme: https
      tls_config:
        ca_file: /etc/prometheus/seed/ca.crt
        cert_file: /etc/prometheus/seed/prometheus.crt
        key_file: /etc/prometheus/seed/prometheus.key
      kubernetes_sd_configs:
      - role: service
        namespaces:
          names: [{{.Release.Namespace}}]
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        action: keep
        regex: etcd-statefulset
      - source_labels: [__meta_kubernetes_service_label_role]
        target_label: role
      - source_labels: [__meta_kubernetes_service_port_name]
        action: keep
        regex: client

    - job_name: 'kube-apiserver'
      scheme: https
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{.Release.Namespace}}]
      tls_config:
        # This is needed because the api server's certificates are not are generated
        # for a specific pod IP
        insecure_skip_verify: true
        cert_file: /etc/prometheus/seed/prometheus.crt
        key_file: /etc/prometheus/seed/prometheus.key
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: kube-apiserver
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: kube-apiserver
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: pod
      metric_relabel_configs:
      - source_labels: [ __name__ ]
        regex: ^apiserver_admission_.+$
        action: drop
{{ include "prometheus.drop-metrics.metric-relabel-config" . | indent 6 }}

    - job_name: 'kube-kubelet'
      honor_labels: false
      scheme: https
      tls_config:
        # This is needed because the kubelets' certificates are not are generated
        # for a specific pod IP
        insecure_skip_verify: true
        cert_file: /etc/prometheus/seed/prometheus.crt
        key_file: /etc/prometheus/seed/prometheus.key
      kubernetes_sd_configs:
      - role: node
        api_server: kube-apiserver
        tls_config:
{{ include "prometheus.tls-config.kube-cert-auth" . | indent 10 }}
      relabel_configs:
      - source_labels: [__meta_kubernetes_node_address_InternalIP]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: type
        replacement: shoot
      # get system services
      metric_relabel_configs:
      - source_labels: [id]
        action: replace
        regex: '^/system\.slice/(.+)\.service$'
        target_label: systemd_service_name
        replacement: '${1}'
      # We want to keep only metrics in kube-system namespace
      - source_labels: [namespace]
        action: keep
        regex: kube-system
      # Drop metrics that are useless and high-volume
      # Use topk(20, count by (__name__, job)({__name__=~".+"})) to find offending time-series
      - source_labels: [ __name__ ]
        regex: ^rest_client_request_latency_seconds.+$
        action: drop
      - source_labels: [ __name__ ]
        regex: ^(etcd|reflector)_.+
        action: drop

    # As of K8S v1.7.3 cAdvisor metrics are located at <kubelet-address>/metrics/cadvisor
    - job_name: 'cadvisor'
      honor_labels: false
      scheme: https
      metrics_path: /metrics/cadvisor
      tls_config:
        # This is needed because the kubelets' certificates are not are generated
        # for a specific pod IP
        insecure_skip_verify: true
        cert_file: /etc/prometheus/seed/prometheus.crt
        key_file: /etc/prometheus/seed/prometheus.key
      kubernetes_sd_configs:
      - role: node
        api_server: kube-apiserver
        tls_config:
{{ include "prometheus.tls-config.kube-cert-auth" . | indent 10 }}
      relabel_configs:
      - source_labels: [__meta_kubernetes_node_address_InternalIP]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: type
        replacement: shoot
      metric_relabel_configs:
      # We want to keep only metrics in kube-system namespace
      - source_labels: [namespace]
        action: keep
        regex: kube-system
      # Drop metrics that are useless and high-volume
      # Use topk(20, count by (__name__, job)({__name__=~".+"})) to find offending time-series
      - source_labels: [ __name__ ]
        regex: ^container_({{ .Values.cadvisorAllowedMetrics | join "|" }})$
        action: keep
      - source_labels: [ container_name ]
        regex: ^POD$
        action: drop
      # get system services
      - source_labels: [ id ]
        action: replace
        regex: ^/system\.slice/(.+)\.service$
        target_label: systemd_service_name
        replacement: '${1}'
      - regex: ^id$
        action: labeldrop

    # We fetch kubelet metrics from seed's kube-system Prometheus and filter
    # the metrics in shoot's namespace
    - job_name: 'kube-kubelet-seed'
      metrics_path: /federate
      params:
        'match[]':
        - '{namespace="{{ .Release.Namespace }}"}'
      static_configs:
      - targets:
        - prometheus-web.garden.svc
      metric_relabel_configs:
      # we make the shoot's pods in the shoot's namespace to appear in as its in the kube-system
      - target_label: namespace
        replacement: kube-system

    - job_name: 'kube-state-metrics'
      scheme: http
      honor_labels: false
      # Service is used, because we only care about metric from one kube-state-metrics instance
      # and not multiple in HA setup
      kubernetes_sd_configs:
      - role: service
        namespaces:
          names: [{{.Release.Namespace}}]
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_component]
        action: keep
        regex: kube-state-metrics
      - source_labels: [__meta_kubernetes_service_port_name]
        action: keep
      - source_labels: [__meta_kubernetes_service_label_type]
        regex: (.+)
        target_label: type
        replacement: ${1}
      - target_label: instance
        replacement: kube-state-metrics
      metric_relabel_configs:
      # we make the shoot's pods in the shoot's namepsace to apear in as its in the kube-system
      - target_label: namespace
        replacement: kube-system

    - job_name: 'annotated-seed-service-endpoints'
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{.Release.Namespace}}]
      relabel_configs:
{{ include "prometheus.service-endpoints.relabel-config" . | indent 6 }}
      metric_relabel_configs:
{{ include "prometheus.drop-metrics.metric-relabel-config" . | indent 6 }}

    - job_name: 'annotated-shoot-service-endpoints'
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [kube-system]
        api_server: kube-apiserver
        tls_config:
{{ include "prometheus.tls-config.kube-cert-auth" . | indent 10 }}
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_addonmanager_kubernetes_io_mode]
        regex: (.+)
        action: keep
{{ include "prometheus.service-endpoints.relabel-config" . | indent 6 }}
      metric_relabel_configs:
{{ include "prometheus.drop-metrics.metric-relabel-config" . | indent 6 }}

    - job_name: 'vpn-connection'
      honor_labels: false
      scrape_interval: 15s
      scrape_timeout: 5s
      metrics_path: /probe
      params:
        module:
        - tcp_vpn
        target:
        - {{ .Values.apiserverServiceIP }}:443
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: [{{ .Release.Namespace }}]
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: keep
        regex: blackbox-export
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: pod