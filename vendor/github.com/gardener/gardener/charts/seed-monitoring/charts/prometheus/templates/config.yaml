apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: {{ .Release.Namespace }}
data:
  prometheus.yaml: |
    # All services in the {{ .Release.Namespace }} and that are annotated with
    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need to set this to `https` & most likely set the `tls_config` of the scrape config.
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: If the metrics are exposed on a different port to the service then set this appropriately. Use this when multiple ports are avaible by the pod.
    # * `prometheus.io/name`: job name label to be applied to all metrics from that service.
    # take note that there is a limit of 500 samples per target

    global:
      evaluation_interval: 30s
      scrape_interval: 30s
      external_labels:
        cluster: {{ .Release.Namespace }}
        seed_api: {{ .Values.seed.apiserver }}
        seed_region: {{ .Values.seed.region }}
        seed_profile: {{ .Values.seed.profile }}
    rule_files:
    - /etc/prometheus/rules/*.yaml
    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - {{ .Release.Namespace }}
            - garden
        relabel_configs:
        - source_labels: [ __meta_kubernetes_service_label_component ]
          action: keep
          regex: alertmanager
        - source_labels: [ __meta_kubernetes_service_label_role ]
          action: keep
          regex: monitoring
        - source_labels: [ __meta_kubernetes_endpoint_port_name ]
          action: keep
          regex: metrics
    scrape_configs:
    - job_name: kube-etcd3
      scheme: https
      tls_config:
        # This is needed because the etcd's certificates are not are generated
        # for a specific pod IP
        insecure_skip_verify: true
        cert_file: /srv/kubernetes/etcd/client/tls.crt
        key_file: /srv/kubernetes/etcd/client/tls.key
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{ .Release.Namespace }}]
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_label_app
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: etcd-statefulset;client
      - source_labels: [ __meta_kubernetes_service_label_role ]
        target_label: role
      - source_labels: [ __meta_kubernetes_pod_name ]
        target_label: pod
      metric_relabel_configs:
      - regex: ^instance$
        action: labeldrop
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.kubeETCD3 | indent 6 }}

    - job_name: kube-apiserver
      scheme: https
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{ .Release.Namespace }}]
      tls_config:
        # This is needed because the api server's certificates are not are generated
        # for a specific pod IP
        insecure_skip_verify: true
        cert_file: /etc/prometheus/seed/prometheus.crt
        key_file: /etc/prometheus/seed/prometheus.key
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: kube-apiserver;kube-apiserver
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [ __meta_kubernetes_pod_name ]
        target_label: pod
      metric_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.kubeAPIServer | indent 6 }}

    - job_name: kube-kubelet
      honor_labels: false
      scheme: https
      tls_config:
        # This is needed because the kubelets' certificates are not are generated
        # for a specific pod IP
        insecure_skip_verify: true
        cert_file: /srv/kubernetes/prometheus-kubelet/prometheus-kubelet.crt
        key_file: /srv/kubernetes/prometheus-kubelet/prometheus-kubelet.key
      kubernetes_sd_configs:
      - role: node
        api_server: kube-apiserver
        tls_config:
{{ include "prometheus.tls-config.kube-cert-auth" . | indent 10 }}
      relabel_configs:
      - source_labels: [ __meta_kubernetes_node_address_InternalIP ]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: type
        replacement: shoot
      # get system services
      metric_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.kubelet | indent 6 }}

    - job_name: cadvisor
      honor_labels: false
      scheme: https
      metrics_path: /metrics/cadvisor
      tls_config:
        # This is needed because the kubelets' certificates are not are generated
        # for a specific pod IP
        insecure_skip_verify: true
        cert_file: /srv/kubernetes/prometheus-kubelet/prometheus-kubelet.crt
        key_file: /srv/kubernetes/prometheus-kubelet/prometheus-kubelet.key
      kubernetes_sd_configs:
      - role: node
        api_server: kube-apiserver
        tls_config:
{{ include "prometheus.tls-config.kube-cert-auth" . | indent 10 }}
      relabel_configs:
      - source_labels: [ __meta_kubernetes_node_address_InternalIP ]
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: type
        replacement: shoot
      metric_relabel_configs:
      # get system services
      - source_labels: [ id ]
        action: replace
        regex: ^/system\.slice/(.+)\.service$
        target_label: systemd_service_name
        replacement: '${1}'
      - source_labels: [ id ]
        action: replace
        regex: ^/system\.slice/(.+)\.service$
        target_label: container_name
        replacement: '${1}'
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.cAdvisor | indent 6 }}
      # We want to keep only metrics in kube-system namespace
      - source_labels: [ namespace ]
        action: keep
        # systemd containers don't have namespaces
        regex: (^$|^kube-system$)
      - source_labels:
        - container_name
        - __name__
        # The system container POD is used for networking
        regex: POD;({{ without .Values.allowedMetrics.cAdvisor "container_network_receive_bytes_total" "container_network_transmit_bytes_total" | join "|" }})
        action: drop
      - source_labels: [ container_name ]
        regex: ^$
        action: drop
      - regex: ^id$
        action: labeldrop

    # We fetch kubelet metrics from seed's kube-system Prometheus and filter
    # the metrics in shoot's namespace
    - job_name: kube-kubelet-seed
      metrics_path: /federate
      params:
        'match[]':
        - '{namespace="{{ .Release.Namespace }}"}'
      static_configs:
      - targets:
        - prometheus-web.garden.svc
      metric_relabel_configs:
      # we make the shoot's pods in the shoot's namespace to appear in as its in the kube-system
      - target_label: namespace
        replacement: kube-system

    - job_name: kube-state-metrics
      honor_labels: false
      # Service is used, because we only care about metric from one kube-state-metrics instance
      # and not multiple in HA setup
      kubernetes_sd_configs:
      - role: service
        namespaces:
          names: [{{ .Release.Namespace }}]
      relabel_configs:
      - source_labels: [ __meta_kubernetes_service_label_component ]
        action: keep
        regex: kube-state-metrics
      - source_labels: [ __meta_kubernetes_service_port_name ]
        action: keep
      - source_labels: [ __meta_kubernetes_service_label_type ]
        regex: (.+)
        target_label: type
        replacement: ${1}
      - target_label: instance
        replacement: kube-state-metrics
      metric_relabel_configs:
      # we make the shoot's pods in the shoot's namepsace to apear in as its in the kube-system
      - target_label: namespace
        replacement: kube-system
      - source_labels: [ pod ]
        regex: ^.+\.tf-pod.+$
        action: drop
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.kubeStateMetrics | indent 6 }}

    - job_name: 'annotated-seed-service-endpoints'
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{ .Release.Namespace }}]
      sample_limit: 500
      relabel_configs:
{{ include "prometheus.service-endpoints.relabel-config" . | indent 6 }}
      metric_relabel_configs:
{{ include "prometheus.drop-metrics.metric-relabel-config" . | indent 6 }}

    - job_name: kube-controller-manager
      {{- if semverCompare ">= 1.13" .Values.kubernetesVersion }}
      scheme: https
      tls_config:
        insecure_skip_verify: true
        cert_file: /etc/prometheus/seed/prometheus.crt
        key_file: /etc/prometheus/seed/prometheus.key
      {{- end }}
      honor_labels: false
      scrape_timeout: 15s
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{ .Release.Namespace }}]
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: kube-controller-manager;metrics
      # common metrics
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [ __meta_kubernetes_pod_name ]
        target_label: pod
      metric_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.kubeControllerManager | indent 6 }}

    - job_name: kube-scheduler
      {{- if semverCompare ">= 1.13" .Values.kubernetesVersion }}
      scheme: https
      tls_config:
        insecure_skip_verify: true
        cert_file: /etc/prometheus/seed/prometheus.crt
        key_file: /etc/prometheus/seed/prometheus.key
      {{- end }}
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{ .Release.Namespace }}]
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: kube-scheduler;metrics
      # common metrics
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [ __meta_kubernetes_pod_name ]
        target_label: pod
      metric_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.kubeScheduler | indent 6 }}

    - job_name: cloud-controller-manager
      {{- if semverCompare ">= 1.13" .Values.kubernetesVersion }}
      scheme: https
      tls_config:
        insecure_skip_verify: true
        cert_file: /etc/prometheus/seed/prometheus.crt
        key_file: /etc/prometheus/seed/prometheus.key
      {{- end }}
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{ .Release.Namespace }}]
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: cloud-controller-manager;metrics
      # common metrics
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [ __meta_kubernetes_pod_name ]
        target_label: pod
      metric_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.cloudControllerManager | indent 6 }}

{{- if  (index .Values.rules.optional "cluster-autoscaler" ).enabled }}
    - job_name: cluster-autoscaler
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{ .Release.Namespace }}]
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: cluster-autoscaler;metrics
      # common metrics
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [ __meta_kubernetes_pod_name ]
        target_label: pod
      metric_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.clusterAutoscaler | indent 6 }}
{{- end }}

    - job_name: machine-controller-manager
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{ .Release.Namespace }}]
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: machine-controller-manager;metrics
      # common metrics
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [ __meta_kubernetes_pod_name ]
        target_label: pod
      metric_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.machineControllerManager | indent 6 }}

    - job_name: alertmanager
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{ .Release.Namespace }}]
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: alertmanager-client;metrics
      # common metrics
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [ __meta_kubernetes_pod_name ]
        target_label: pod
      metric_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.alertManager | indent 6 }}

    - job_name: prometheus
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [{{ .Release.Namespace }}]
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: prometheus-web;metrics
      # common metrics
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [ __meta_kubernetes_pod_name ]
        target_label: pod
      metric_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.prometheus | indent 6 }}

    - job_name: coredns
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [ kube-system ]
        api_server: kube-apiserver
        tls_config:
{{ include "prometheus.tls-config.kube-cert-auth" . | indent 10 }}
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: kube-dns;metrics
      # common metrics
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [ __meta_kubernetes_pod_name ]
        target_label: pod
      metric_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.coredns | indent 6 }}

    - job_name: node-exporter
      honor_labels: false
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: [ kube-system ]
        api_server: kube-apiserver
        tls_config:
{{ include "prometheus.tls-config.kube-cert-auth" . | indent 10 }}
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: node-exporter;metrics
      # common metrics
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [ __meta_kubernetes_pod_name ]
        target_label: pod
      metric_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.allowedMetrics.nodeExporter | indent 6 }}

    - job_name: vpn-connection
      honor_labels: false
      scrape_interval: 15s
      scrape_timeout: 5s
      metrics_path: /probe
      params:
        module:
        - tcp_vpn
        target:
        - {{ .Values.apiserverServiceIP }}:443
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: [{{ .Release.Namespace }}]
      relabel_configs:
      - source_labels: [ __meta_kubernetes_pod_container_port_name ]
        action: keep
        regex: blackbox-export
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: pod

    - job_name: blackbox-apiserver
      params:
        module:
        - http_apiserver
      scrape_timeout: 10s
      metrics_path: /probe
      static_configs:
      - targets:
        - {{ .Values.shoot.apiserver }}/healthz
      relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
        action: replace
      - source_labels: [__param_target]
        target_label: instance
        action: replace
      - target_label: __address__
        replacement: 127.0.0.1:9115
        action: replace
