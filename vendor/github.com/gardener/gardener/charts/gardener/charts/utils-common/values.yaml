global:
  # Gardener API server configuration values
  apiserver:
    enabled: true
    replicaCount: 1
    serviceAccountName: gardener-apiserver
    image:
      repository: eu.gcr.io/gardener-project/gardener/apiserver
      tag: latest
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        cpu: 300m
        memory: 256Mi
    etcd:
      useSidecar: false # only meant for development purposes. if this is set to true, other etcd config values are ignored
      servers: https://etcd:2379
      # caBundle: |
      #   -----BEGIN CERTIFICATE-----
      #   ...
      #   -----END CERTIFICATE-----
      # tls:
      #   crt: |
      #     -----BEGIN CERTIFICATE-----
      #     ...
      #     -----END CERTIFICATE-----
      #   key: |
      #     -----BEGIN RSA PRIVATE KEY-----
      #     ...
      #     -----END RSA PRIVATE KEY-----
    insecureSkipTLSVerify: false
    groupPriorityMinimum: 10000
    versionPriority: 20
    caBundle: |
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
    tls:
      crt: |
        -----BEGIN CERTIFICATE-----
        ...
        -----END CERTIFICATE-----
      key: |
        -----BEGIN RSA PRIVATE KEY-----
        ...
        -----END RSA PRIVATE KEY-----
    featureGates: {}

  # Gardener controller manager configuration values
  controller:
    enabled: true
    replicaCount: 1
    serviceAccountName: gardener-controller-manager
    image:
      repository: eu.gcr.io/gardener-project/gardener/controller-manager
      tag: latest
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        cpu: 750m
        memory: 512Mi
    internalDomain:
      provider: aws-route53 # aws-route53, google-clouddns, alicloud-dns or openstack-designate
      hostedZoneID: Z3ABCDE1FGHIJK
      domain: example.com
      credentials:
        # for aws-route53 we need to provide the following keys:
        accessKeyID: access-key-id-with-route53-privileges
        secretAccessKey: secret-access-key-with-route53-privileges
        #
        # for google-clouddns we need to provide the following keys:
        # serviceaccount.json: '{"type": "service_account", "project_id": "...", ...}'
        #
        # for alicloud-dns we need to provide the following keys:
        # accessKeyID: access-key-id-with-aliclouddns-privileges
        # accessKeySecret: access-key-secret-with-aliclouddns-privileges
        #
        # for openstack-designate we need to provide the following keys:
        # authURL: my-keystone-url
        # domainName: my-domain
        # tenantName: my-tenant
        # userDomainName: my-user-domain
        # username: my-user-name
        # password: my-password
    defaultDomains: []
    # - domain: example.com
    #   provider: aws-route53 # aws-route53, google-clouddns or openstack-designate
    #   hostedZoneID: Z3ABCDE1FGHIJK
    #   credentials:
    #     # for aws-route53 we need to provide the following keys:
    #     accessKeyID: access-key-id-with-route53-privileges
    #     secretAccessKey: secret-access-key-with-route53-privileges
    #
    #     # for google-clouddns we need to provide the following keys:
    #     serviceaccount.json: '{"type": "service_account", "project_id": "...", ...}'
    #
    #     # for openstack-designate we need to provide the following keys:
    #     authURL: my-keystone-url
    #     domainName: my-domain
    #     tenantName: my-tenant
    #     userDomainName: my-user-domain
    #     username: my-user-name
    #     password: my-password
    alertingSMTP: []
    # - to: email-address-to-send-alerts-to
    #   from: email-address-to-send-alerts-from
    #   smarthost: smtp-host-used-for-sending
    #   auth_username: smtp-authentication-username
    #   auth_identity: smtp-authentication-username
    #   auth_password: smtp-authentication-password
    # openVPNDiffieHellmanKey: |
    #   my-key generated by `openssl dhparam -out dh2048.pem 2048`
    additionalVolumes: []
    additionalVolumeMounts: []
    config:
      clientConnection:
        acceptContentTypes: application/json
        contentType: application/json
        qps: 100
        burst: 130
      controllers:
        shoot:
          concurrentSyncs: 20
          syncPeriod: 1h
          retryDuration: 24h
        shootCare:
          concurrentSyncs: 5
          syncPeriod: 30s
        shootMaintenance:
          concurrentSyncs: 5
        shootQuota:
          concurrentSyncs: 5
          syncPeriod: 60m
        backupInfrastructure:
          concurrentSyncs: 20
          syncPeriod: 24h
        seed:
          concurrentSyncs: 5
          syncPeriod: 1m
          reserveExcessCapacity: true
      leaderElection:
        leaderElect: true
        leaseDuration: 15s
        renewDeadline: 10s
        retryPeriod: 2s
        resourceLock: configmaps
      logLevel: info
      server:
        http:
          bindAddress: 0.0.0.0
          port: 2718
        https:
          bindAddress: 0.0.0.0
          port: 2719
          tls:
            caBundle: |
              -----BEGIN CERTIFICATE-----
              ...
              -----END CERTIFICATE-----
            crt: |
              -----BEGIN CERTIFICATE-----
              ...
              -----END CERTIFICATE-----
            key: |
              -----BEGIN RSA PRIVATE KEY-----
              ...
              -----END RSA PRIVATE KEY-----
      featureGates: {}

  # Deployment related configuration
  deployment:
    virtualGarden:
      enabled: false
      clusterIP: 1.2.3.4
