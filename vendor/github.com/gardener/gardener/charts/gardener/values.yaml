# Gardener API server configuration values
apiserver:
  enabled: true
  replicaCount: 1
  serviceAccountName: gardener-apiserver
  image:
    repository: eu.gcr.io/gardener-project/gardener/apiserver
    tag: latest
  etcd:
    useSidecar: false # only meant for development purposes. if this is set to true, other etcd config values are ignored
    servers: https://etcd:2379
    # caBundle: |
    #   -----BEGIN CERTIFICATE-----
    #   ...
    #   -----END CERTIFICATE-----
    # tls:
    #   crt: |
    #     -----BEGIN CERTIFICATE-----
    #     ...
    #     -----END CERTIFICATE-----
    #   key: |
    #     -----BEGIN RSA PRIVATE KEY-----
    #     ...
    #     -----END RSA PRIVATE KEY-----
  insecureSkipTLSVerify: false
  groupPriorityMinimum: 10000
  versionPriority: 20
  caBundle: |
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----
  tls:
    crt: |
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
    key: |
      -----BEGIN RSA PRIVATE KEY-----
      ...
      -----END RSA PRIVATE KEY-----

# Gardener controller manager configuration values
controller:
  enabled: true
  replicaCount: 1
  serviceAccountName: gardener-controller-manager
  image:
    repository: eu.gcr.io/gardener-project/gardener/controller-manager
    tag: latest
  internalDomain:
    provider: aws-route53 # aws-route53 or google-clouddns
    hostedZoneID: Z3ABCDE1FGHIJK
    domain: example.com
    credentials:
      # for aws-route53 we need 'accessKeyID' and 'secretAccessKey'
      accessKeyID: access-key-id-with-route53-privileges
      secretAccessKey: secret-access-key-with-route53-privileges
      # for google-clouddns we need 'serviceaccount.json' field' (service account needs 'DNS administrator' role)
      # serviceaccount.json: '{"type": "service_account", "project_id": "...", ...}'
  defaultDomains: []
  # - domain: example.com
  #   provider: aws-route53 # aws-route53 or google-clouddns
  #   hostedZoneID: Z3ABCDE1FGHIJK
  #   credentials:
  #     # for aws-route53 we need 'accessKeyID' and 'secretAccessKey'
  #     accessKeyID: access-key-id-with-route53-privileges
  #     secretAccessKey: secret-access-key-with-route53-privileges
  #     # for google-clouddns we need 'serviceaccount.json' field' (service account needs 'DNS administrator' role)
  #     serviceaccount.json: '{"type": "service_account", "project_id": "...", ...}'
  alertingSMTP: []
  # - to: email-address-to-send-alerts-to
  #   from: email-address-to-send-alerts-from
  #   smarthost: smtp-host-used-for-sending
  #   auth_username: smtp-authentication-username
  #   auth_identity: smtp-authentication-username
  #   auth_password: smtp-authentication-password
  config:
    clientConnection:
      acceptContentTypes: application/json
      contentType: application/json
      qps: 100
      burst: 130
    controllers:
      shoot:
        concurrentSyncs: 20
        syncPeriod: 10m
        retryDuration: 1440m
      shootCare:
        concurrentSyncs: 5
        syncPeriod: 30s
      shootMaintenance:
        concurrentSyncs: 5
        syncPeriod: 15m
      shootQuota:
        concurrentSyncs: 5
        syncPeriod: 60m
    leaderElection:
      leaderElect: true
      leaseDuration: 15s
      renewDeadline: 10s
      retryPeriod: 2s
      resourceLock: configmaps
    logLevel: info
    metrics:
      interval: 30s
    server:
      bindAddress: 0.0.0.0
      port: 2718
